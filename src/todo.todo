General:
	✔ make thunder_robot @done (3/26/2024, 4:37:58 PM)
	☐ let thunder copy robot_gen into thunder_robot folders for tests
	☐ let thunder copy thunder_robot.h/.cpp into generatedFiles folder and change 'robot' with the name of robot
	☐ let thunder generate robot_inertial_REG and put it into folder generatedFiles


Program:
	☐ 'thunder gen robot.yaml' generates a filder 'generatedFiles' and put inside
		✔ 'robot_gen.h', 'robot_gen.cpp' that are the generated library from casadi @done (3/24/2024, 9:57:11 AM)
		☐ cout the things made
		☐ 'thunder_robot..h', 'thunder_robot.cpp', that is the wrapper class for the casadi generated generatedFiles
		☐ 'robot_inertial_REG.yaml' that contains parameters in which the dynamics is linear
	☐ program should use the yaml file to generate everything, options can be added like 'name'...

library:
	☐ create custor class thunder_robot for specified robot, e.g., thunder_panda (needed for more than one robot for the class name)
	☐ once creation of library, copy thunder_robot and substitute 'robot' with the robot_name

generate everything with one execution:
	✔ generate library @done (3/23/2024, 6:09:08 PM)
	☐ inertial parameters that are linear
	☐ generate thunder_robot (like thunder-panda)
	☐ other?

thunder:
	☐ integrate genYAML into thunder (generate inertial_REG from thunder)

thunder_robot:
	☐ load and save inertial parameters
	☐ test

☐ thunder_robot as thunder_panda (need if you use more than one robot, class should be different)
☐ dynamic matrix derivatives
☐ linearized system
☐ friction
☐ filtered regressor
☐ command line for create_robot

to write in thunder_robot:
	☐ change 'robot' to 'name_robot' in the #include and class_name
	☐ add 'constexpt int N_JOINTS = nj;' where nj is taked from thunder
