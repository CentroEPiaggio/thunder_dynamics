improvings:
	☐ FrameOffset into utils
	☐ insert args or model only if order>0
	☐ selection matrix for elastic joints

new features:
	☐ symbolic selectivity: possible to choose variables that are symbolic
	☐ generalize kinematics: not DH or URDF, parameters enter directly into the Transform matrix
	☐ analytic Jacobian: choose a parametrization and provide conversions
	☐ elastic
	☐ arguments as a map, get also return arguments, function set("") imposta argomento, add_arg -> aggiunge un argomento simbolico
	☐ default conscructor of Robot
	☐ handling of different joint structure, fixed, defined by user
	☐ add map with the compute functions, and add to the map kinematics, dynamics, regressors, then add method compute that calls each compute function
	☐ initialize variable dimensions in initializer list of Robot
	☐ save_arguments or parametere more generic, all in one file, kinematics, dynamics, elastic
	☐ load arguments or parameters, one function for everything! (load_parameters(file) have to load par_DYN, par_K... all automatically)
	☐ config file can be used by both robot and thunder_robot, save and load have to be the same!

to Thunder_3:
	☐ gravity not in base frame class
	☐ update_inertial_DYN/REG not efficient!, too mani conversions eigen-casadi
	☐ generalize path with absolute_path
	☐ dynamics not clean
	☐ regressors not clean
	☐ FrameOffset not so general, use T as internal transformation and provide conversions
	☐ create thunder_robot from thunder
	✔ create library thunder_utils that contain all that cannot be generated, best if it is useful both on thunder and thunder_robot @done (8/27/2024, 11:13:54 AM)

	☐ is possible to have two different robots? due to casadi definitions on generated file?
	
INFO:
	- thunder take the file <robot>.yaml that contains the configuration of the robot
	- thunder creates <robot>_gen.h, <robot>_gen.cpp
	- thunder take thunder_robot and rename it to thunder_<robot>, changing inside the necessary. Then copy it to generatedFiles
	- thunder generates the <robot>_inertial_REG.yaml from the config file 
	- elastic and friction regressors implemented with jacobian

General:
	✔ Modules kinematics, dynamics, regressors @done (8/24/2024, 5:18:33 PM)
	✔ make thunder_robot @done (3/26/2024, 4:37:58 PM)
	✔ let thunder copy robot_gen into thunder_robot folders for tests @done (3/27/2024, 4:24:18 PM)
	✔ thunder working on console @done (3/29/2024, 11:32:08 AM)
	✔ let thunder copy thunder_robot.h/.cpp into generatedFiles folder, use function in utils @done (3/29/2024, 11:32:20 AM)
	✔ change the thunder_robot in generatedFiles like N_JOINTS or robot in <robot> @done (4/3/2024, 7:55:54 AM)
	✔ let thunder generate robot_inertial_REG and put it into folder generatedFiles @done (4/7/2024, 4:15:21 PM)
	☐ multithreading

Program:
	☐ 'thunder gen robot.yaml' generates a folder 'generatedFiles' and put inside
		✔ 'robot_gen.h', 'robot_gen.cpp' that are the generated library from casadi @done (3/24/2024, 9:57:11 AM)
		✔ 'thunder_robot.h', 'thunder_robot.cpp', that is the wrapper class for the casadi generated generatedFiles @done (4/3/2024, 7:56:35 AM)
		✔ 'robot_inertial_REG.yaml' that contains parameters in which the dynamics is linear @done (4/7/2024, 4:15:36 PM)
		☐ 'thunder_utils.h/cpp' that contain everything useful both on thunder and thunder_robot, and is not autogenerated
	✔ program should use the yaml file to generate everything, options can be added like 'name'... @done (4/3/2024, 7:56:50 AM)
	✔ thunder from bin @done (4/4/2024, 10:43:15 AM)
	☐ there is a copy of utils functions from urdf2dh_inertial to thunder_robot. Another way is to add another library with general methods, or to add functions on thunder_robot creation (bad). Maybe the better choice is to create a folder with all files of the library inside(thunder_robot, robot_gen, thunder_utils)
	✔ thunder copy generated files into thunder_robot project (not working for now) @done (8/27/2024, 12:41:17 PM)
	
thunder:
	☐ dynamic matrix derivatives
	☐ linearized system
	✔ friction @done (9/6/2024, 6:06:31 AM)
	☐ filtered regressor
	☐ command line for create_robot

thunder_robot:
	✔ load and save inertial parameters @done (4/3/2024, 7:57:43 AM)
	☐ manage inertial_DYN
	☐ C_regr_classic = 0.5*C_regr = 0.5*C_dyn

issues:
	☐ simplify some casadi expression?
	☐ test base_to_L0